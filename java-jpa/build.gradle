plugins {
  id 'org.springframework.boot' version '2.4.2'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.hibernate.orm' version '5.4.27.Final'
  id 'java'
}

hibernate {
  enhance {
    enableLazyInitialization = true
    enableDirtyTracking = true
    enableExtendedEnhancement = false
  }
}

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-amqp'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

  implementation 'com.vladmihalcea:hibernate-types-52:2.10.2'

  implementation 'org.postgresql:postgresql:42.2.18'
  implementation 'org.flywaydb:flyway-core:6.5.7'

  implementation 'org.springframework.experimental:spring-graalvm-native:0.8.5'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.amqp:spring-rabbit-test'
}

clean.doLast {
  List<String> locations = [ ]
  sourceSets.main.resources.each {
    String path = it.path.replaceAll("$projectDir/src/main/resources/", '')
    if (path.startsWith('db/migration')) {
      locations.add("classpath:$path")
    }
  }
  FileWriter profileConfigFile = new FileWriter("$projectDir/src/main/resources/application-native.properties")
  profileConfigFile.write("spring.flyway.locations=${locations.join(',')}")
  profileConfigFile.flush()
  profileConfigFile.close()
}

test {
  useJUnitPlatform()
}

bootBuildImage {
  imageName = "almedina.eu/experiment/${project.name}"
  builder = "paketobuildpacks/builder:tiny"
  environment = [
    "BP_BOOT_NATIVE_IMAGE"                : "1",
    "BP_BOOT_NATIVE_IMAGE_BUILD_ARGUMENTS": [
      '-Dspring.spel.ignore=true',
      '-Dspring.native.remove-yaml-support=true'
    ].join(' ')
  ]
}
